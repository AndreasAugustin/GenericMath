<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Math.LinearAlgebra</name>
    </assembly>
    <members>
        <member name="T:Math.LinearAlgebra.SpecialPolynomials">
            <summary>
            Special polynomials.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialPolynomials.ZeroPolynomial``2(System.UInt32)">
            <summary>
            Creates the zeros polynomial for dimension.
            </summary>
            <returns>The polynomial.</returns>
            <param name="degree">The dimension.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TGroup">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialPolynomials.OnePolynomial``2(System.UInt32)">
            <summary>
            Creates the one polynomial for dimension.
            </summary>
            <returns>The polynomial.</returns>
            <param name="degree">The dimension.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.Polynomial`2">
            <summary>
            Polynomial from set.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IPolynomial`2">
            <summary>
            Interface for the polynomial.
            </summary>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomial`2.ReturnNewInstance(System.UInt32)">
            <summary>
            Returns a new the instance with degree set as parameter.
            </summary>
            <returns>The instance with same dimension.</returns>
            <param name="degree">The degree of the new instance.</param>
        </member>
        <member name="P:Math.LinearAlgebra.IPolynomial`2.Degree">
            <summary>
            Gets the degree of the polynomial.
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:Math.LinearAlgebra.IPolynomial`2.Item(System.UInt32)">
            <summary>
            Gets or sets the coefficients of <see cref="T:Math.LinearAlgebra.Polynomial`2"/> at the specified index.
            </summary>
            <param name="index">The index of the coefficient.</param>
            <returns>The coefficient at the specified index.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.Polynomial`2.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.Polynomial`2"/> class.
            </summary>
            <param name="degree">The degree of the polynomial.</param>
        </member>
        <member name="M:Math.LinearAlgebra.Polynomial`2.ReturnNewInstance(System.UInt32)">
            <summary>
            Returns a new the instance with same degree like the calling instance.
            </summary>
            <returns>The instance with same dimension.</returns>
            <param name="degree">The degree of the new polynomial.</param>
        </member>
        <member name="M:Math.LinearAlgebra.Polynomial`2.Equals(Math.LinearAlgebra.Polynomial{`0,`1})">
            <summary>
            Determines whether the specified <see cref="T:Math.LinearAlgebra.Polynomial`2"/> is equal to the
            current <see cref="T:Math.LinearAlgebra.Polynomial`2"/>.
            </summary>
            <param name="other">The <see cref="T:Math.LinearAlgebra.Polynomial`2"/> to compare with the current <see cref="T:Math.LinearAlgebra.Polynomial`2"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Math.LinearAlgebra.Polynomial`2"/> is equal to the
            current <see cref="T:Math.LinearAlgebra.Polynomial`2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.Polynomial`2.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Math.LinearAlgebra.Polynomial`2.Degree">
            <summary>
            Gets the degree of the polynomial.
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:Math.LinearAlgebra.Polynomial`2.Item(System.UInt32)">
            <summary>
            Gets or sets the coefficients of <see cref="T:Math.LinearAlgebra.Polynomial`2"/> at the specified index.
            </summary>
            <param name="index">The index of the coefficient.</param>
            <returns>The coefficient at the specified index.</returns>
            <exception cref="T:Math.LinearAlgebra.LinearAlgebraException">Thrown when the 
            index is not within the degree of the polynomial.</exception>
        </member>
        <member name="T:Math.LinearAlgebra.Matrix`2">
            <summary>
            Creates a matrix. 
            The elements of the matrix are of the struct T.
            </summary>
            <typeparam name="T">The first type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IMatrix`2">
            <summary>
            Interface for the matrix class.
            </summary>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrix`2.ReturnNewInstance(System.UInt32,System.UInt32)">
            <summary>
            Returns the new instance.
            </summary>
            <returns>The new instance.</returns>
            <param name="rowDimension">Row dimension.</param>
            <param name="columnDimension">Column dimension.</param>
        </member>
        <member name="P:Math.LinearAlgebra.IMatrix`2.RowDimension">
            <summary>
            Gets the row dimension.
            </summary>
            <value>The row dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.IMatrix`2.ColumnDimension">
            <summary>
            Gets the column dimension.
            </summary>
            <value>The column dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.IMatrix`2.Item(System.UInt32,System.UInt32)">
            <summary>
            Gets or sets the <see cref="T:Math.LinearAlgebra.IMatrix`2"/> with the specified row column.
            </summary>
            <param name="row">The Row.</param>
            <param name="column">The Column.</param>
            <returns>The value at row and column.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.Matrix`2.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.Matrix`2"/> class.
            The matrix is squared.
            </summary>
            <param name="dimension">The Dimension of the matrix.</param>
        </member>
        <member name="M:Math.LinearAlgebra.Matrix`2.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.Matrix`2"/> class.
            </summary>
            <param name="rowDimension">Row dimension.</param>
            <param name="columnDimension">Column dimension.</param>
        </member>
        <member name="M:Math.LinearAlgebra.Matrix`2.ReturnNewInstance(System.UInt32,System.UInt32)">
            <summary>
            Returns the new instance.
            </summary>
            <returns>The new instance.</returns>
            <param name="rowDimension">Row dimension.</param>
            <param name="columnDimension">Column dimension.</param>
        </member>
        <member name="M:Math.LinearAlgebra.Matrix`2.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.Matrix`2.Equals(Math.LinearAlgebra.Matrix{`0,`1})">
            <summary>
            Determines whether the specified <see cref="T:Math.LinearAlgebra.Matrix`2"/> is equal to the current <see cref="T:Math.LinearAlgebra.Matrix`2"/>.
            </summary>
            <param name="other">The <see cref="T:Math.LinearAlgebra.Matrix`2"/> to compare with the current <see cref="T:Math.LinearAlgebra.Matrix`2"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Math.LinearAlgebra.Matrix`2"/> is equal to the current
            <see cref="T:Math.LinearAlgebra.Matrix`2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Math.LinearAlgebra.Matrix`2.RowDimension">
            <summary>
            Gets the row dimension.
            </summary>
            <value>The row dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.Matrix`2.ColumnDimension">
            <summary>
            Gets the column dimension.
            </summary>
            <value>The column dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.Matrix`2.Item(System.UInt32,System.UInt32)">
            <summary>
            Gets or sets the <see cref="T:Math.LinearAlgebra.Matrix`2"/> with the specified row column.
            </summary>
            <param name="row">The Row.</param>
            <param name="column">The Column.</param>
            <returns>The value at row and column.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.SpecialMatrices">
            <summary>
            Special matrices.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialMatrices.ZeroMatrix``2(System.UInt32)">
            <summary>
            Creates a matrix with Zero as elements.
            </summary>
            <returns>The matrix.</returns>
            <param name="dimension">The dimension.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TGroup">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialMatrices.ZeroMatrix``2(System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix with Zero as elements.
            </summary>
            <returns>The matrix.</returns>
            <param name="rowDimension">Row dimension.</param>
            <param name="columnDimension">Column dimension.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TGroup">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialMatrices.OneMatrix``2(System.UInt32)">
            <summary>
            Creates the one matrix.
            </summary>
            <param name="dimension">The dimension.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>The one matrix with dimension n.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.IPolynomialFromRingExtensions">
            <summary>
            Polynomial from ring extensions.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialFromRingExtensions.Pow``2(Math.LinearAlgebra.IPolynomial{``0,``1},System.UInt32)">
            <summary>
            Multiply the polynomial power times.
            </summary>
            <returns>The power of the polynomial.</returns>
            <param name="polynomial">The polynomial.</param>
            <param name="power">The power.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialFromRingExtensions.Multiply``2(Math.LinearAlgebra.IPolynomial{``0,``1},Math.LinearAlgebra.IPolynomial{``0,``1})">
            <summary>
            Multiply the specified polynomial1 and polynomial2.
            </summary>
            <param name="polynomial1">The left polynomial.</param>
            <param name="polynomial2">The right polynomial.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>The product of polynomial1 and polynomial2.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialFromRingExtensions.Calculate``2(Math.LinearAlgebra.IPolynomial{``0,``1},``0)">
            <summary>
            Calculate the specified polynomial with the value x.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="x">The x coordinate.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>The point calculation for the polynomial.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialFromRingExtensions.ScalarMultiply``2(Math.LinearAlgebra.IPolynomial{``0,``1},``0)">
            <summary>
            Multiplies the polynomial with a scalar.
            </summary>
            <returns>The multiplication scalar * polynomial.</returns>
            <param name="polynomial">The polynomial.</param>
            <param name="scalar">The scalar.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IPolynomialExtensions">
            <summary>
            Extension methods for the <see cref="T:Math.LinearAlgebra.Polynomial`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialExtensions.Copy``2(Math.LinearAlgebra.IPolynomial{``0,``1})">
            <summary>
            Copy the specified polynomial.
            </summary>
            <returns>A copy of the polynomial.</returns>
            <param name="polynomial">The polynomial.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IPolynomialFromGroupExtensions">
            <summary>
            Polynomial from group extensions.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialFromGroupExtensions.InversePolynomial``2(Math.LinearAlgebra.IPolynomial{``0,``1})">
            <summary>
            Inverses the polynomial.
            </summary>
            <returns>The polynomial.</returns>
            <param name="polynomial">The given polynomial.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TStruct">The second type parameter.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IPolynomialFromMonoidExtensions">
            <summary>
            Extensions methods for the <see cref="T:Math.LinearAlgebra.Polynomial`2"/> class.
            TStruct needs to be of type <see cref="T:Math.Base.IMonoid`1"/>
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IPolynomialFromMonoidExtensions.Add``2(Math.LinearAlgebra.IPolynomial{``0,``1},Math.LinearAlgebra.IPolynomial{``0,``1})">
            <summary>
            Add the specified polynomial1 and polynomial2.
            </summary>
            <param name="polynomial1">The left polynomial.</param>
            <param name="polynomial2">The right polynomial.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TMonoid">The underlying structure.</typeparam>
            <returns>A new polynomial as a sum of polynomial1 and polynomial2.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.IMatrixExtensions">
            <summary>
            Extension methods for the matrix class. <see cref="T:Math.LinearAlgebra.Matrix`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixExtensions.GetColumnVector``2(Math.LinearAlgebra.IMatrix{``0,``1},System.UInt32)">
            <summary>
            Gets the column vector at column columnIndex.
            </summary>
            <returns>The row vector.</returns>
            <param name="matrix">The matrix.</param>
            <param name ="columnIndex">The column index.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixExtensions.GetRowVector``2(Math.LinearAlgebra.IMatrix{``0,``1},System.UInt32)">
            <summary>
            Gets the row vector at row rowIndex.
            </summary>
            <returns>The column vector.</returns>
            <param name="matrix">The matrix.</param>
            <param name="rowIndex">Column index.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixExtensions.Transpose``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Transpose the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixExtensions.Copy``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Copy the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
            <returns>A copy of the matrix.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.IMatrixFromGroupExtensions">
            <summary>
            Extension methods for the <see cref="T:Math.LinearAlgebra.Matrix`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromGroupExtensions.Inverse``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Inverse the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TGroup">The second type parameter.</typeparam>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.IMatrixFromMonoidExtensions">
            <summary>
            Extensions methods for the <see cref="T:Math.LinearAlgebra.Matrix`2"/> class.
            TStruct needs to be of type <see cref="T:Math.Base.IMonoid`1"/>
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromMonoidExtensions.Add``2(Math.LinearAlgebra.IMatrix{``0,``1},Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Add the specified leftMatrix and rightMatrix.
            </summary>
            <param name="leftMatrix">The left matrix.</param>
            <param name="rightMatrix">The right matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TGroup">The underlying structure.</typeparam>
            <returns>The addition of left and right matrices.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromMonoidExtensions.SumElements``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Summarizes all elements in the matrix.
            </summary>
            <returns>The sum over all elements in the matrix.</returns>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TGroup">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IMatrixFromRingExtensions">
            <summary>
            Extension methods for the <see cref="T:Math.LinearAlgebra.Matrix`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromRingExtensions.ScalarMultiply``2(Math.LinearAlgebra.IMatrix{``0,``1},``0)">
            <summary>
            Multiply a scalar lambda with the matrix A.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>Lambda * A.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromRingExtensions.MultiplyMatrix``2(Math.LinearAlgebra.IMatrix{``0,``1},Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Multiplies the matrix A with matrix B 
            A * B.
            </summary>
            <returns>The resulted matrix.</returns>
            <param name="matrix1">The left Matrix.</param>
            <param name="matrix2">The right Matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromRingExtensions.Pow``2(Math.LinearAlgebra.IMatrix{``0,``1},System.UInt32)">
            <summary>
            Multiply the matrix power times.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="power">The power.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>The power of the matrix with power.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixFromRingExtensions.MultiplyVector``2(Math.LinearAlgebra.IMatrix{``0,``1},Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Multiplies the Matrix A with a vector v.
            A * v.
            </summary>
            <returns>The new vector.</returns>
            <param name="matrix">The matrix.</param>
            <param name="vector">The vector.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IDirectSum`2">
            <summary>
            Interface for the direct sum of structures.
            </summary>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TStruct">The structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSum`2.ReturnNewInstance(System.UInt32)">
            <summary>
            Returns the new instance.
            </summary>
            <returns>The new instance.</returns>
            <param name="dimension">Row dimension.</param>
        </member>
        <member name="P:Math.LinearAlgebra.IDirectSum`2.Dimension">
            <summary>
            Gets the dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.IDirectSum`2.Item(System.UInt32)">
            <summary>
            Gets or sets the <see cref="T:Math.LinearAlgebra.IDirectSum`2"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value at index.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.DirectSumMonoid`2">
            <summary>
            Monoid structure for direct sums.
            </summary>
            <typeparam name="T">The underlying base set.</typeparam>
            <typeparam name="TMonoid">The underlying structure for the base set.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSumMonoid`2.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.DirectSumMonoid`2"/> class.
            </summary>
            <param name="dimension">The dimension of the monoid in this class.</param>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSumMonoid`2.Addition(Math.LinearAlgebra.DirectSum{`0,`1},Math.LinearAlgebra.DirectSum{`0,`1})">
            <summary>
            Addition of the specified leftElement and rightElement.
            </summary>
            <param name="leftElement">Left element.</param>
            <param name="rightElement">Right element.</param>
            <returns>The addition of the leftElement and rightElement (leftElement + rightElement)</returns>
            <exception cref="T:System.InvalidCastException">When the cast was not possible.</exception>
            <exception cref="T:System.NotSupportedException">When the dimension of the parameters is not equal to the set dimension of the instance.</exception>
        </member>
        <member name="P:Math.LinearAlgebra.DirectSumMonoid`2.Dimension">
            <summary>
            Gets the dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.DirectSumMonoid`2.Zero">
            <summary>
            Gets the zero element of the group.
            </summary>
            <value>The zero.</value>
        </member>
        <member name="T:Math.LinearAlgebra.DirectSum`2">
            <summary>
            The Vector class.
            </summary>
            <typeparam name="T">The first type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="F:Math.LinearAlgebra.DirectSum`2._entries">
            <summary>
            The entries of the vector.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSum`2.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.DirectSum`2"/> class.
            </summary>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSum`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Math.LinearAlgebra.DirectSum`2"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Math.LinearAlgebra.DirectSum`2"/>.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSum`2.ReturnNewInstance(System.UInt32)">
            <summary>
            Returns the new instance.
            </summary>
            <returns>The new instance.</returns>
            <param name="rowDimension">Row dimension.</param>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSum`2.Equals(Math.LinearAlgebra.DirectSum{`0,`1})">
            <summary>
            Determines whether the specified <see cref="T:Math.LinearAlgebra.DirectSum`2"/> is equal to the current <see cref="T:Math.LinearAlgebra.DirectSum`2"/>.
            </summary>
            <param name="other">The <see cref="T:Math.LinearAlgebra.DirectSum`2"/> to compare with the current <see cref="T:Math.LinearAlgebra.DirectSum`2"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Math.LinearAlgebra.DirectSum`2"/> is equal to the current
            <see cref="T:Math.LinearAlgebra.DirectSum`2"/>otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Math.LinearAlgebra.DirectSum`2.Dimension">
            <summary>
            Gets the dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="P:Math.LinearAlgebra.DirectSum`2.Item(System.UInt32)">
            <summary>
            Gets or sets the <see cref="T:Math.LinearAlgebra.DirectSum`2"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value at index.</returns>
            <exception cref="T:Math.LinearAlgebra.LinearAlgebraException">Thrown when the 
            index is not within the dimension of the direct sum.</exception>
        </member>
        <member name="T:Math.LinearAlgebra.IDirectSumExtensions">
            <summary>
            Extension methods for the <see cref="T:Math.LinearAlgebra.IDirectSum`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumExtensions.Copy``2(Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Copy the specified tuple.
            </summary>
            <returns>A copy of the tuple.</returns>
            <param name="tuple">The tuple.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumExtensions.InsertionSort``2(Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Sorts the vector with insertion sort method.
            </summary>
            <returns>The sort.</returns>
            <param name="tuple">The sorted vector is a new vector, not a reference to the argument.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumExtensions.BubbleSort``2(Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Sorts the vector with bubble sort algorithm.
            </summary>
            <returns>A copy of the vector (sorted).</returns>
            <param name="tuple">The tuple.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IDirectSumFromGroupExtensions">
            <summary>
            Extension methods for the <see cref="T:Math.LinearAlgebra.DirectSum`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromGroupExtensions.InverseElement``2(Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Returns a vector with inverse values of the given vector.
            </summary>
            <returns>The inverse vector.</returns>
            <param name="tuple">The tuple.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TGroup">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.IDirectSumFromMonoidExtensions">
            <summary>
            Extensions methods for the <see cref="T:Math.LinearAlgebra.DirectSum`2"/> class.
            TStruct needs to be of type <see cref="T:Math.Base.IMonoid`1"/>
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromMonoidExtensions.SumElements``2(Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Adds all the elements in the vector.
            </summary>
            <returns>The sum over all elements in the vector.</returns>
            <param name="vector">The vector.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TMonoid">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromMonoidExtensions.Add``2(Math.LinearAlgebra.IDirectSum{``0,``1},Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Add the specified vector1 and vector2.
            </summary>
            <param name="tuple1">The left vector.</param>
            <param name="tuple2">The right vector.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TMonoid">The underlying structure.</typeparam>
            <returns>vector1 + vector2.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromMonoidExtensions.Injection``2(Math.LinearAlgebra.IDirectSum{``0,``1},System.UInt32)">
            <summary>
            Increases the vector Dimension by additionalDimensions.
            The values of the parameters are default(T).
            </summary>
            <param name="tuple">The tuple.</param>
            <param name="additionalDimensions">Additional dimensions.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TMonoid">The underlying structure.</typeparam>
            <returns>A new vector with dimension dimension(original vector) + additionalDimension.
            The first values are the values of the original vector. The other values are the zero elements of the group
            associated with T.
            </returns>
        </member>
        <member name="T:Math.LinearAlgebra.IDirectSumFromRingExtensions">
            <summary>
            Extension methods for the <see cref="T:Math.LinearAlgebra.DirectSum`2"/> class.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromRingExtensions.Multiply``2(Math.LinearAlgebra.IDirectSum{``0,``1},Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Point multiplication of vector1 and vector2.
            The dimensions must agree.
            </summary>
            <param name="tuple1">The left vector.</param>
            <param name="tuple2">The right.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>The multiplication vector1 * vector2.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromRingExtensions.Pow``2(Math.LinearAlgebra.IDirectSum{``0,``1},System.UInt32)">
            <summary>
            Multiplies the vector power times.
            Multiplies the vector with itself power times.
            </summary>
            <param name="tuple">The vector.</param>
            <param name="power">The power.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
            <returns>The vector^power.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromRingExtensions.ScalarProduct``2(Math.LinearAlgebra.IDirectSum{``0,``1},Math.LinearAlgebra.IDirectSum{``0,``1})">
            <summary>
            Calculates the scalar product of two vectors.
            </summary>
            <returns>The product.</returns>
            <param name="vector1">The left vector.</param>
            <param name="vector2">The right vector.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IDirectSumFromRingExtensions.ScalarMultiply``2(Math.LinearAlgebra.IDirectSum{``0,``1},``0)">
            <summary>
            Multiplies a scalar lambda with a vector v.
            </summary>
            <returns>lambda * v.</returns>
            <param name="tuple">The vector.</param>
            <param name="scalar">The scalar.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TRing">The underlying structure.</typeparam>
        </member>
        <member name="T:Math.LinearAlgebra.DirectSumGroup`2">
            <summary>
            Direct sum group.
            </summary>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TGroup">The underlying structure</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSumGroup`2.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.DirectSumGroup`2"/> class.
            </summary>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSumGroup`2.Inverse(Math.LinearAlgebra.DirectSum{`0,`1})">
            <summary>
            Returns the inverse of the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The inverse of element (-element)</returns>
            <exception cref="T:System.InvalidCastException">When the cast to DirectSum from interface was not possible</exception>
        </member>
        <member name="T:Math.LinearAlgebra.SpecialDirectSums">
            <summary>
            Special vectors.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialDirectSums.ZeroTuple``2(System.UInt32)">
            <summary>
            Returns a vector with default(T) as values.
            </summary>
            <returns>The vector.</returns>
            <param name="dimension">The dimension.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
            <returns>The zerovector with dimension.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.SpecialDirectSums.OneTuple``2(System.UInt32)">
            <summary>
            Returns a vector with ones as values.
            </summary>
            <returns>The vector.</returns>
            <param name="dimension">The dimension.</param>
            <typeparam name="T">The type parameter.</typeparam>
            <typeparam name="TStruct">The underlying structure.</typeparam>
            <returns>The zerovector with dimension.</returns>
        </member>
        <member name="T:Math.LinearAlgebra.DirectSumRing`2">
            <summary>
            Direct sum ring.
            </summary>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TRing">The underlying structure</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSumRing`2.#ctor(System.UInt32)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.DirectSumRing`2"/> class.
            </summary>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:Math.LinearAlgebra.DirectSumRing`2.Multiplication(Math.LinearAlgebra.DirectSum{`0,`1},Math.LinearAlgebra.DirectSum{`0,`1})">
            <summary>
            Multiplication of the specified leftElement and rightElement.
            </summary>
            <param name="leftElement">Left element.</param>
            <param name="rightElement">Right element.</param>
            <returns>The multiplication of the leftElement and rightElement (leftElement * rightElement)</returns>
            <exception cref="T:System.InvalidCastException">Thrown when the cast was not possible.</exception>
        </member>
        <member name="P:Math.LinearAlgebra.DirectSumRing`2.One">
            <summary>
            Gets the one element of the ring.
            </summary>
            <value>The one.</value>
        </member>
        <member name="T:Math.LinearAlgebra.LinearAlgebraException">
            <summary>
            Exception class for Math.LinearAlgebra assembly.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.LinearAlgebraException.#ctor(Math.LinearAlgebra.LinearAlgebraExceptionType)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.LinearAlgebraException"/> class.
            </summary>
            <param name="exceptionType">Exception type.</param>
        </member>
        <member name="M:Math.LinearAlgebra.LinearAlgebraException.#ctor(Math.LinearAlgebra.LinearAlgebraExceptionType,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.LinearAlgebraException"/> class.
            </summary>
            <param name="exceptionType">Exception type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Math.LinearAlgebra.LinearAlgebraException.#ctor(Math.LinearAlgebra.LinearAlgebraExceptionType,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:Math.LinearAlgebra.LinearAlgebraException"/> class.
            </summary>
            <param name="exceptionType">Exception type.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Math.LinearAlgebra.LinearAlgebraException.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="T:Math.LinearAlgebra.LinearAlgebraExceptionType">
            <summary>
            Exception type for the Math.LinearAlgebra assembly.
            </summary>
        </member>
        <member name="F:Math.LinearAlgebra.LinearAlgebraExceptionType.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:Math.LinearAlgebra.LinearAlgebraExceptionType.IndexEqualOrGreaterDimension">
            <summary>
            The index equal or greater dimension.
            </summary>
        </member>
        <member name="F:Math.LinearAlgebra.LinearAlgebraExceptionType.IndexEqualsMaxUnsignedInteger">
            <summary>
            The index equals max unsigned integer.
            </summary>
        </member>
        <member name="T:Math.LinearAlgebra.IMatrixSquaredExtensions">
            <summary>
            Matrix squared extensions.
            </summary>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixSquaredExtensions.Trace``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Calculates the trace of the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="TMonoid">The underlying structure.</typeparam>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixSquaredExtensions.GaussJordanAlgorithm``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Calculates the gauss jordan algorithm.
            </summary>
            <returns>The jordan algorithm.</returns>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TField">The underlying structure (field).</typeparam>
        </member>
        <member name="M:Math.LinearAlgebra.IMatrixSquaredExtensions.GaussJordanAlgorithmWithSteps``2(Math.LinearAlgebra.IMatrix{``0,``1})">
            <summary>
            Calculates the Inverse of the matrix A with the Gauss-Jordan algorithm.
            </summary>
            <returns>The steps for calculating the inverse matrix. (The inverse matrix is the last one in the list)</returns>
            <param name="matrix">The matrix.</param>
            <typeparam name="T">The underlying set.</typeparam>
            <typeparam name="TField">The underlying structure (field).</typeparam>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Math.Base.Tests</name>
    </assembly>
    <members>
        <member name="T:Math.Base.Tests.DoubleGroupTest">
            <summary>
            Double group test.
            </summary>
        </member>
        <member name="T:Math.Base.Tests.TemplateGroupTest`1">
            <summary>
            Template for the group tests.
            </summary>
            <typeparam name="T">The type parameter for the <see cref="T:Math.Base.IGroup`1"/> class.</typeparam>
        </member>
        <member name="M:Math.Base.Tests.TemplateGroupTest`1.TestAddition(`0,`0,`0)">
            <summary>
            Tests the addition.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateGroupTest`1.TestInverse(`0,`0)">
            <summary>
            Tests the inverse.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">The expected inverse.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateGroupTest`1.TemplateTestInverse(`0,`0)">
            <summary>
            Tests the inverse method.
            Can be used as template for test method TestAddition with more input parameters from attribute.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">The expected inverse.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateGroupTest`1.TemplateTestAddition(`0,`0,`0)">
            <summary>
            Tests the addition method.
            Can be used as template for test method TestAddition with more input parameters from attribute.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="P:Math.Base.Tests.TemplateGroupTest`1.Group">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="M:Math.Base.Tests.DoubleGroupTest.TestInverse(System.Double,System.Double)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">The expected inverse.</param>
        </member>
        <member name="M:Math.Base.Tests.DoubleGroupTest.TestAddition(System.Double,System.Double,System.Double)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="P:Math.Base.Tests.DoubleGroupTest.Group">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="T:Math.Base.Tests.Int32GroupTest">
            <summary>
            Test for the integer group.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.Int32GroupTest.TestInverse(System.Int32,System.Int32)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">The expected inverse.</param>
        </member>
        <member name="M:Math.Base.Tests.Int32GroupTest.TestAddition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="P:Math.Base.Tests.Int32GroupTest.Group">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="T:Math.Base.Tests.ComplexGroupTest">
            <summary>
            Complex group test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.ComplexGroupTest.TestInverse(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">The expected inverse.</param>
        </member>
        <member name="M:Math.Base.Tests.ComplexGroupTest.TestAddition(System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="P:Math.Base.Tests.ComplexGroupTest.Group">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="T:Math.Base.Tests.TemplateRingTest`1">
            <summary>
            Template ring test.
            </summary>
            <typeparam name="T">The type parameter</typeparam>
        </member>
        <member name="M:Math.Base.Tests.TemplateRingTest`1.TestMultiplication(`0,`0,`0)">
            <summary>
            Tests the multiplication.
            </summary>
            <param name="leftInput">Left input.</param>
            <param name="rightInput">Right input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateRingTest`1.TemplateTestMultiplication(`0,`0,`0)">
            <summary>
            Templates for the test multiplication.
            </summary>
            <param name="leftInput">Left input.</param>
            <param name="rightInput">Right input.</param>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:Math.Base.Tests.TemplateRingTest`1.Ring">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.Int32RingTest">
            <summary>
            Integer ring test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.Int32RingTest.TestMultiplication(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests the multiplication.
            </summary>
            <param name="leftInput">Left input.</param>
            <param name="rightInput">Right input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.Int32RingTest.Ring">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.DoubleRingTest">
            <summary>
            Double ring test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.DoubleRingTest.TestMultiplication(System.Double,System.Double,System.Double)">
            <summary>
            Tests the multiplication.
            </summary>
            <param name="leftInput">Left input.</param>
            <param name="rightInput">Right input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.DoubleRingTest.Ring">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.ComplexRingTest">
            <summary>
            Complex ring test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.ComplexRingTest.TestMultiplication(System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Tests the multiplication.
            </summary>
            <param name="leftInput">Left input.</param>
            <param name="rightInput">Right input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.ComplexRingTest.Ring">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.TemplateEuclidianRingTest`1">
            <summary>
            Template for euclidian ring tests.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
        </member>
        <member name="M:Math.Base.Tests.TemplateEuclidianRingTest`1.TestEuclidianNorm(`0,System.Double)">
            <summary>
            Tests the euclidian norm.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateEuclidianRingTest`1.TemplateTestEuclidianNorm(`0,System.Double)">
            <summary>
            Templates for the test multiplication.
            </summary>
            <param name="input">Left input.</param>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:Math.Base.Tests.TemplateEuclidianRingTest`1.EuclidianRing">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.Int32EuclidianRingTest">
            <summary>
            Integer euclidian ring test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.Int32EuclidianRingTest.TestEuclidianNorm(System.Int32,System.Double)">
            <summary>
            Tests the euclidian norm.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.Int32EuclidianRingTest.EuclidianRing">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.DoubleEuclidianRingTest">
            <summary>
            Double euclidian ring test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.DoubleEuclidianRingTest.TestEuclidianNorm(System.Double,System.Double)">
            <summary>
            Tests the euclidian norm.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.DoubleEuclidianRingTest.EuclidianRing">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.ComplexEuclidianRingTest">
            <summary>
            Complex euclidian ring test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.ComplexEuclidianRingTest.TestEuclidianNorm(System.Numerics.Complex,System.Double)">
            <summary>
            Tests the euclidian norm.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.ComplexEuclidianRingTest.EuclidianRing">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="T:Math.Base.Tests.RingExtensionsTest">
            <summary>
            Test class for ring extensions.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.RingExtensionsTest.Pow_CheckResult_AreEqual``1(``0,System.UInt32,``0,Math.Base.IRing{``0})">
            <summary>
            Tests the power method.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
            <param name="factor">The test factor.</param>
            <param name="power">The power.</param>
            <param name="expected">The expected result.</param>
            <param name="ring">The ring.</param>
        </member>
        <member name="T:Math.Base.Tests.EuclidianRingExtensionsTest">
            <summary>
            Integer extension tests.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.EuclidianRingExtensionsTest.TestEuclidianAlgorithm">
            <summary>
            Tests the euclidian algorithm.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.EuclidianRingExtensionsTest.TestExtendedEuclidianAlgorithm">
            <summary>
            Tests the extended euclidian algorithm.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.EuclidianRingExtensionsTest.TestChineseRestTermHelper">
            <summary>
            Tests the chinese rest term helper.
            </summary>
        </member>
        <member name="T:Math.Base.Tests.UInt32MonoidTest">
            <summary>
            Test for the <see cref="T:Math.Base.UInt32Monoid"/> class.
            </summary>
        </member>
        <member name="T:Math.Base.Tests.TemplateMonoidTest`1">
            <summary>
            Template for the group tests.
            </summary>
            <typeparam name="T">The type parameter for the <see cref="T:Math.Base.IMonoid`1"/> class.</typeparam>
        </member>
        <member name="M:Math.Base.Tests.TemplateMonoidTest`1.TestAddition(`0,`0,`0)">
            <summary>
            Tests the addition.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateMonoidTest`1.TemplateTestAddition(`0,`0,`0)">
            <summary>
            Tests the addition method.
            Can be used as template for test method TestAddition with more input parameters from attribute.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="P:Math.Base.Tests.TemplateMonoidTest`1.Monoid">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="M:Math.Base.Tests.UInt32MonoidTest.TestAddition(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Tests the inverse method.
            </summary>
            <param name="leftInput">The left input.</param>
            <param name="rightInput">The right input.</param>
            <param name="expectedSum">The expected sum from left and right input.</param>
        </member>
        <member name="P:Math.Base.Tests.UInt32MonoidTest.Monoid">
            <summary>
            Gets the monoid.
            </summary>
            <value>The monoid.</value>
        </member>
        <member name="T:Math.Base.Tests.TemplateFieldTest`1">
            <summary>
            Template ring test.
            </summary>
            <typeparam name="T">The type parameter</typeparam>
        </member>
        <member name="M:Math.Base.Tests.TemplateFieldTest`1.TestMultiplicationInverse(`0,`0)">
            <summary>
            Tests the multiplication inverse.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="M:Math.Base.Tests.TemplateFieldTest`1.TemplateTestMultiplicationInverse(`0,`0)">
            <summary>
            Templates for the test multiplication inverse.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:Math.Base.Tests.TemplateFieldTest`1.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="T:Math.Base.Tests.DoubleFieldTest">
            <summary>
            Double field test.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.DoubleFieldTest.TestMultiplicationInverse(System.Double,System.Double)">
            <summary>
            Tests the euclidian norm.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.DoubleFieldTest.Field">
            <summary>
            Gets the ring.
            </summary>
            <value>The ring.</value>
        </member>
        <member name="M:Math.Base.Tests.ComplexFieldTest.TestMultiplicationInverse(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Tests the euclidian norm.
            </summary>
            <param name="input">The input.</param>
            <param name="expected">Expected solution.</param>
        </member>
        <member name="P:Math.Base.Tests.ComplexFieldTest.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="T:Math.Base.Tests.IntervalTest`2">
            <summary>
            Test methods for the <see cref="T:Math.Base.Interval`2"/>class.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.IntervalTest`2.Construct_RightParameter_IsNotNull(`0,`0)">
            <summary>
            Constructs the right parameter is not null.
            </summary>
            <param name="minElement">Minimum element.</param>
            <param name="maxElement">Max element.</param>
        </member>
        <member name="M:Math.Base.Tests.IntervalTest`2.Construct_WrongParameter_ThrowsException(`0,`0)">
            <summary>
            Constructs the wrong parameter throws exception.
            </summary>
            <param name="minElement">Minimum element.</param>
            <param name="maxElement">Max element.</param>
        </member>
        <member name="M:Math.Base.Tests.IntervalTest`2.IsInInterval_CheckValue_EqualsExpected(`0,`0,`0,System.Boolean)">
            <summary>
            Determines whether this instance is in interval check value equals expected the specified minElement
            maxElement elementTocheck expected.
            </summary>
            <returns><c>true</c> if this instance is in interval check value equals expected the specified minElement maxElement
            elementTocheck expected; otherwise, <c>false</c>.</returns>
            <param name="minElement">Minimum element.</param>
            <param name="maxElement">Max element.</param>
            <param name="elementToCheck">Element tocheck.</param>
            <param name="expected">If set to <c>true</c> expected.</param>
        </member>
        <member name="P:Math.Base.Tests.IntervalTest`2.ConstructTestDataSource">
            <summary>
            Gets the construct test data source.
            </summary>
            <value>The construct test data source.</value>
        </member>
        <member name="P:Math.Base.Tests.IntervalTest`2.ConstructThrowsTestDataSource">
            <summary>
            Gets the construct throws test data source.
            </summary>
            <value>The construct throws test data source.</value>
        </member>
        <member name="P:Math.Base.Tests.IntervalTest`2.TestDataSource">
            <summary>
            Gets the test data source.
            </summary>
            <value>The test data source.</value>
        </member>
        <member name="T:Math.Base.Tests.DoubleIntervalTest`1">
            <summary>
            Test for intervalls with Double as underlying set.
            </summary>
        </member>
        <member name="M:Math.Base.Tests.DoubleIntervalTest`1.Construct_RightParameter_IsNotNull(System.Double,System.Double)">
            <summary>
            Constructs the right parameter is not null.
            </summary>
            <param name="minElement">Minimum element.</param>
            <param name="maxElement">Max element.</param>
        </member>
        <member name="M:Math.Base.Tests.DoubleIntervalTest`1.Construct_WrongParameter_ThrowsException(System.Double,System.Double)">
            <summary>
            Constructs the wrong parameter throws exception.
            </summary>
            <param name="minElement">Minimum element.</param>
            <param name="maxElement">Max element.</param>
        </member>
        <member name="M:Math.Base.Tests.DoubleIntervalTest`1.IsInInterval_CheckValue_EqualsExpected(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Determines whether this instance is in interval check value equals expected the specified minElement
            maxElement elementTocheck expected.
            </summary>
            <returns>true</returns>
            <c>false</c>
            <param name="minElement">Minimum element.</param>
            <param name="maxElement">Max element.</param>
            <param name="elementToCheck">Element tocheck.</param>
            <param name="elementToCheck">Element to check.</param>
            <param name="expected">If set to <c>true</c> expected.</param>
        </member>
        <member name="P:Math.Base.Tests.DoubleIntervalTest`1.ConstructTestDataSource">
            <summary>
            Gets the construct test data source.
            </summary>
            <value>The construct test data source.</value>
        </member>
        <member name="P:Math.Base.Tests.DoubleIntervalTest`1.ConstructThrowsTestDataSource">
            <summary>
            Gets the construct throws test data source.
            </summary>
            <value>The construct throws test data source.</value>
        </member>
    </members>
</doc>
